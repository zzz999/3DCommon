import Detector from './Detector';
import HashMap from './HashMap';
import * as signals from 'signals';
import 'extrajs/AMRTLoader';
import 'three-examples/controls/OrbitControls';
import 'three-examples/shaders/CopyShader';
import 'three-examples/postprocessing/EffectComposer';
import 'three-examples/postprocessing/SSAARenderPass';
import 'three-examples/postprocessing/RenderPass';
import 'three-examples/postprocessing/MaskPass';
import 'three-examples/postprocessing/ShaderPass';
import {LoadingPage} from './LoadingPage';

//exr
import 'three-examples/loaders/EXRLoader';
import 'three-examples/loaders/EquirectangularToCubeGenerator';
import 'three-examples/pmrem/PMREMGenerator';
import 'three-examples/pmrem/PMREMCubeUVPacker';

import MD5 from './MD5';

    //工具参数和方法---START
    //检测对WebGL的支持
    if (!Detector.webgl) {
        Detector.addGetWebGLMessage();
    }
    
    //如果内置Map没实现
    if (typeof (Map) == 'undefined') {
        Map = HashMap;
    } 

    //平台判断
    var u = navigator.userAgent;
    var isAndroid = u.indexOf('Android') > -1 || u.indexOf('Adr') > -1 || u.indexOf('Linux') > -1;

    //事件兼容
    var startEventType = ((document.ontouchstart !== null) ? 'mousedown' : 'touchstart'),
        moveEventType = ((document.ontouchmove !== null) ? 'mousemove' : 'touchmove'),
        endEventType = ((document.ontouchend !== null) ? 'mouseup' : 'touchend');

    //工具参数和方法---END
    function BaseViewer(ele, options){
        var Signal = signals.Signal;

        //初始化完成
        this.onInited = new Signal();

        var scope = this;

        function init(){
            scope.options = {
                minCamZoom: 1,//相机拉近系数
                maxCamZoom: 5,//相机拉远系数
                camNear: 0.1,//相机近切系数
                camFar: 10000,//相机远切系数
                scaleFactor: 1,//初始相机z系数
                initYFactor: 0.5,//初始相机y系数
                enablePostProcessing:false//启用后处理
            }

            //配置信息
            if(options){
                if(options.minCamZoom){
                    scope.options.minCamZoom = options.minCamZoom;
                }
                if(options.maxCamZoom){
                    scope.options.maxCamZoom = options.maxCamZoom;
                }
                if(options.camNear){
                    scope.options.camNear = options.camNear;
                }
                if(options.camFar){
                    scope.options.camFar = options.camFar;
                }
                if(options.scaleFactor){
                    scope.options.scaleFactor = options.scaleFactor;
                }
                if(options.initYFactor){
                    scope.options.initYFactor = options.initYFactor;
                }
                if(options.enablePostProcessing){
                    scope.options.enablePostProcessing = options.enablePostProcessing;
                }
            }

            scope.scene;//场景

            //渲染器
            scope.renderer = new THREE.WebGLRenderer({
                antialias: true,
                alpha: true
            });

            var rect = scope.container.getBoundingClientRect();
            scope.renderer.setPixelRatio(window.devicePixelRatio);
            scope.renderer.setSize(rect.width, rect.height);
            scope.renderer.domElement.style.position = 'absolute';
            scope.renderer.domElement.style.top = '0';
            scope.renderer.domElement.style.left = '0';
            scope.renderer.domElement.style.bottom = '0';
            scope.renderer.domElement.style.right = '0';

            scope.dom = scope.renderer.domElement;

            //阻止在Canvas中的鼠标移动浏览器默认事件
            scope.dom.addEventListener(moveEventType, function(e){
                e.preventDefault();
            }, true);

            scope.container.prepend(scope.dom);
                       
            //相机
            scope.camera = new THREE.PerspectiveCamera(50, rect.width / rect.height, 0.01, 10000);

            //加载器
            scope.loader = new THREE.AMRTLoader();
            scope.loader.isAndroid = isAndroid;
            
            //主对象(一般为场景的第三个子节点)
            scope.mainObj;
            //动画控制
            scope._playing = false;
            scope._speed = 1;

            //事件监听
            //窗口大小改变事件(有的浏览器只执行一次，有的执行两次。为防止不能拿到(特别是只执行一次的时候)准确的值，故延迟执行尺寸改变操作)
            var isResizing = false;
            window.addEventListener('resize', function () {
                if (!isResizing) {
                    setTimeout(function () {
                        var newRect = scope.container.getBoundingClientRect();
                        var width = newRect.width,
                            height = newRect.height;

                        scope.camera.aspect = width / height;
                        scope.camera.updateProjectionMatrix();
                        scope.renderer.setSize(width, height);

                        if(scope.options.enablePostProcessing && scope.composer){
                            var pixelRatio = scope.renderer.getPixelRatio();
                            var newWidth = Math.floor(width * pixelRatio) || 1;
                            var newHeight = Math.floor(height * pixelRatio) || 1;
                            scope.composer.setSize(newWidth, newHeight);
                        }

                        isResizing = false;
                    }, 100);
                }
                isResizing = true;
            }, false);  

            //取消移动端手势长按弹出提示框的操作
            document.addEventListener('contextmenu', function (e) {
                e.preventDefault();
            });

            //相机控制
            scope.controls = new THREE.OrbitControls(scope.camera, scope.dom);  
            scope.controls.rotateSpeed = 0.5;
            scope.controls.enablePan = false;               

            //外部实现
            scope.onMeshLoaded = new Signal();   
            scope.onTextureLoaded = new Signal();
            scope.onUpdate = new Signal();
            scope.onAnimationLoaded = new Signal();
            scope.onAnimationUpdate = new Signal();

            scope.onInited.dispatch();
        }

        if(options){
            if(!options.developerID){
                throw new Error('developerID为空');
            }
            if(!options.appID){
                throw new Error('appID为空');
            }
            if(!options.secretKey){
                throw new Error('secretKey为空');
            }

            var apiUrl = 'https://open.laozicloud.com/';
            if(options.apiUrl){
                if(options.apiUrl.lastIndexOf('/') !== options.apiUrl.length -1){
                    options.apiUrl += '/';
                }
                apiUrl = options.apiUrl;
            }

            var req = new XMLHttpRequest(); 
            req.responseType = 'json';//异步需设置
            req.open('POST', apiUrl + 'dev/v2/sdkAuthH5');
            req.setRequestHeader("Content-type","application/x-www-form-urlencoded");
            req.onreadystatechange = function(){
                if (req.readyState == 4 && req.status == 200){
                    var res = req.response;
                    if(res.code === '000000'){
                        //3D容器
                        scope.container;
                        if(ele){
                            if(typeof ele === 'string'){
                                scope.container = document.getElementById(ele);
                            }else if(ele instanceof HTMLElement){
                                scope.container = ele;
                            }else{
                                console.log('请提供3D容器或容器ID！');
                                return;
                            }
                        }else{
                            console.log('请提供3D容器或容器ID！');
                            return;
                        }

                        if(scope.container){
                            init();
                        }
                    }else{
                        throw new Error(res.msg);
                    }
                }
            };
            req.send('developer_id=' + options.developerID + '&appid=' + options.appID + '&sign=' + MD5.hex_md5('appid='+options.appID + '&developer_id=' + options.developerID + options.secretKey));      
        }else{
            throw new Error('开发者参数缺失！');
        }
    }

    BaseViewer.prototype = {
        constructor: BaseViewer,
        getMainObj:function(){
            return this.mainObj;
        },
        //渲染
        render:function(){
            var scope = this;
            function update(){  
                requestAnimationFrame(update); 

                if(scope.controls.enabled){
                    scope.controls.update();
                }

                var delta = clock.getDelta();
                if(scope._playing){  
                    var i = 0,
                        len = scope.loader.cacheAnimations.length,
                        delta = delta * scope._speed;
                    for(i; i < len; i++){
                        scope.loader.cacheAnimations[i].update(delta);
                        scope.onAnimationUpdate.dispatch(i, delta);
                    }                    
                }

                if(scope.options.enablePostProcessing){
                    if(!scope.onUI){
                        scope.composer.render();
                    }else{
                        scope.renderer.render(scope.scene, scope.camera);   
                    }    
                }else{
                    scope.renderer.render(scope.scene, scope.camera); 
                }

                scope.onUpdate.dispatch();
            }

            if(this.loadingPage){
                this.loadingPage.hide();
            }
            //网格加载完成
            this.onMeshLoaded.dispatch();

            //计时器
            var clock = new THREE.Clock(); 

            update();
        },
        //设置加载页
        setLoadingPage:function(divId, progressBarId, progressTextId){
            if(divId){
                this.loadingPage = new LoadingPage(divId, progressBarId, progressTextId);
            }else{
                console.log('请提供加载页元素ID！');
            }
        },
        //设置背景
        setBackgroud:function(base64){
            var scope = this;
            if(base64.indexOf('#') === 0){
                scope.scene.background = new THREE.Color().setStyle(base64);
            }else{
                new THREE.TextureLoader().load(base64, function (texture) {
                    texture.minFilter = THREE.LinearFilter;
                    scope.scene.background = texture;
                });
            }
        },
        getObjectById:function(id){
            return this.mainObj.getObjectById(id);
        },
        getRaycaster:function(e){
            var raycaster = new THREE.Raycaster();
            var mouse = new THREE.Vector2();
            //兼容移动端
            if(e.touches && e.touches.length > 0) {    
                e = e.touches[0];
            }else{
                if(e.changedTouches && e.changedTouches.length > 0) {    
                    e = e.changedTouches[0];
                }
            }
            var rect = this.container.getBoundingClientRect();
            mouse.x = ((e.clientX - rect.left) / rect.width) * 2 - 1;
            mouse.y = -((e.clientY - rect.top) / rect.height) * 2 + 1;
            raycaster.setFromCamera(mouse, this.camera);
            return raycaster;
        },
        isPlaying:function(){
            return this._playing;
        },
        attach:function(child, oldParent, newParent) {
            child.applyMatrix( new THREE.Matrix4().getInverse( newParent.matrixWorld ) );
            oldParent.remove(child);
            newParent.add(child);
        },
        setSpeed:function(num){
            this._speed = num;
        },
        //播放动画
        playAnim:function(flag){
            var scope = this;
            //重置动画
            function resetAnim(){
                var i = 0,
                    len = scope.loader.cacheAnimations.length;
                for(i; i < len; i++){
                    scope.loader.cacheAnimations[i].update(-scope.loader.cacheAnimations[i].time);
                }
            }
            this._playing = flag;
            if(!this._playing){
                resetAnim();
            }
        },
        //加载模型
        loadModel:function(paths){
            var scope = this;
            //自适应相机
            function fitCamera(object, boundingBox) {
                //var center = boundingBox.getCenter(new THREE.Vector3());

                //var centerPoint = center;

                //object.translateX(-centerPoint.x);
                //object.translateY(-centerPoint.y);
                //object.translateZ(-centerPoint.z);

                var size = boundingBox.getSize(new THREE.Vector3());
                var maxDim = Math.max(size.x, size.y, size.z);     
                var fov = scope.camera.fov * ( Math.PI / 180 );
                var cameraZ = Math.abs(maxDim / (2 * Math.tan(fov / 2)));

                //cameraZ *= scope.options.scaleFactor;

                scope.camera.position.z = cameraZ * scope.options.scaleFactor;
                scope.camera.position.y = cameraZ * scope.options.initYFactor;//俯视

                //var minZ = boundingBox.min.z;
                //var cameraToFarEdge = ( minZ < 0 ) ? -minZ + cameraZ : cameraZ + minZ;
      
                var minDim = Math.min(size.x, size.y, size.z);
                scope.camera.near = minDim * (scope.options.camNear || 1);

                scope.camera.far = minDim * (scope.options.camFar || 10000);
                scope.camera.updateProjectionMatrix();

                if (scope.controls) {
                    scope.controls.target = new THREE.Vector3();
                    //scope.controls.maxDistance = cameraToFarEdge * (scope.options.maxCamZoom || 5);  
                    //scope.controls.minDistance = Math.max((maxDim * (scope.options.minCamZoom || 1.5)),(minDim * 1.1));
                    scope.controls.saveState();
                }
            }

            //加载细节贴图   
            function LoadThumbnils() {
                scope.loader.loadThumbTexture(
                    paths.s,
                    function(){},
                    function(xhr){},
                    function (err){
                        console.error( err );
                    }
                );
            }

            //加载贴图
            function LoadTextures(callback) {       
                if(paths.t instanceof Array){
                    scope.loader.textureNum = paths.t.length;
                    for(var i = 0; i < paths.t.length; i++){
                        scope.loader.loadRealTexture(
                            paths.t[i],
                            callback,
                            function(xhr){},
                            function (err){
                                console.error( err );
                            }
                        );
                    }
                }
                else{
                    scope.loader.loadTexture(
                        paths.t,
                        callback,
                        function(xhr){},
                        function (err){
                            console.error(err);
                        }
                    );
                }
            }

            //加载环境贴图
            function LoadEnvMap(callback) {
                if(paths.e.indexOf('.exr') > -1){
                    loadHDREnvmap(callback);
                }else{
                    scope.loader.loadEnvMap(
                        paths.e,
                        callback,
                        function(xhr){},
                        function (err){
                            console.error( err );
                        }
                    );                
                }
            }

            //加载动画
            function LoadAnimations(){
                scope.loader.loadAnimations(
                    paths.a,
                    function(){
                        scope.onAnimationLoaded.dispatch();
                    },
                    function(xhr){},
                    function (err){
                        console.error( err );
                    }
                );
            }

            //初始化后处理
            function initPostprocess(){
                scope.onUI = false;
                scope.composer = new THREE.EffectComposer(scope.renderer);

                var ssaaRenderPass = new THREE.SSAARenderPass(scope.scene, scope.camera);
                ssaaRenderPass.sampleLevel = isAndroid ? 2 : 4;
                ssaaRenderPass.unbiased = true;
                scope.composer.addPass(ssaaRenderPass);

                var copyPass = new THREE.ShaderPass(THREE.CopyShader);
                copyPass.renderToScreen = true;
                scope.composer.addPass(copyPass);

                //点击开始
                scope.dom.addEventListener(startEventType, function(e) {
                    scope.onUI = true;
                    ssaaRenderPass.enabled = false;     
                });
                //点击结束
                scope.dom.addEventListener(endEventType, function(e) {
                    scope.onUI = false;
                    ssaaRenderPass.enabled = true;                
                });
                //点击取消
                scope.dom.addEventListener('touchcancel', function(e) {
                    scope.onUI = false;
                    ssaaRenderPass.enabled = true;
                });
                //鼠标离开
                scope.dom.addEventListener('mouseleave', function(e) {
                    scope.onUI = false;
                    ssaaRenderPass.enabled = true;
                });
            }

            //加载HDR环境贴图
            function loadHDREnvmap(callback){               
                new THREE.EXRLoader().load(paths.e, function ( texture ) {
                    texture.minFilter = THREE.NearestFilter;
                    texture.encoding = THREE.LinearEncoding;

                    var cubemapGenerator = new THREE.EquirectangularToCubeGenerator( texture, { resolution: 512, type: THREE.HalfFloatType } );
                    var cubeMapTexture = cubemapGenerator.update( scope.renderer );

                    var pmremGenerator = new THREE.PMREMGenerator( cubeMapTexture );
                    pmremGenerator.update( scope.renderer );

                    var pmremCubeUVPacker = new THREE.PMREMCubeUVPacker( pmremGenerator.cubeLods );
                    pmremCubeUVPacker.update( scope.renderer );

                    var exrCubeRenderTarget = pmremCubeUVPacker.CubeUVRenderTarget;

                    for (var matIndex = 0; matIndex < scope.loader.cacheMats.length; matIndex++) {
                        scope.loader.cacheMats[matIndex].envMap = exrCubeRenderTarget.texture;
                        scope.loader.cacheMats[matIndex].needsUpdate = true;
                    }

                    texture.dispose();
                    pmremGenerator.dispose();
                    pmremCubeUVPacker.dispose();

                    callback();
                } );
            }

            //加载完成
            function LoadComplete(obj){ 
                scope.scene = obj;

                //是否启用后处理
                if(scope.options.enablePostProcessing){
                    initPostprocess();
                }
        
                //移到原点
                scope.mainObj = scope.scene.children[2];

                var box = new THREE.Box3();
                box.makeEmpty();
                //处理模型
                scope.mainObj.children.forEach(function(m){
                    if(m.name !== 'shadow'){
                        box.expandByObject(m);
                    }else{
                        m.renderOrder = -1;
                    }
                });

                //设置相机  
                fitCamera(scope.mainObj, box);  

                //加载其他资源
                LoadThumbnils();
                LoadTextures(function(){
                    if(paths.e){
                        LoadEnvMap(function(){
                            scope.onTextureLoaded.dispatch();;//全部贴图加载完成
                        });
                    }                   
                });

                if(paths.a){
                    LoadAnimations();
                }
                              
                //渲染
                scope.render();
            }

            function loadMulti(){
                if(scope.loader.mi === scope.loader.maxmi){
                    scope.loader.endLoad = true;
                }
                scope.loader.load(paths.m[scope.loader.mi],
                    function(obj){
                        if(scope.loader.mi === 0){                   
                            scope.loader.mi += 1;
                            loadMulti();
                        } else if(scope.loader.mi === scope.loader.maxmi) {                 
                            LoadComplete(obj);
                        }else{
                            scope.loader.mi += 1;
                            loadMulti();
                        }
                    },function(xhr){
                        if(scope.loadingPage){
                            if((xhr.total === undefined || xhr.total === 0)){
                                pct += 1;
                                if(pct >= parseInt(100 * (scope.loader.mi + 1) / (scope.loader.maxmi + 1))){
                                    pct = parseInt(100 * (scope.loader.mi + 1) / (scope.loader.maxmi + 1));
                                }
                                scope.loadingPage.setPercent(pct);
                            }else{
                                pct = parseInt(100 * (scope.loader.mi) / (scope.loader.maxmi + 1) + xhr.loaded / xhr.total * 100 / (scope.loader.maxmi + 1));
                                if(pct > 100){
                                    pct = 100;
                                }
                                scope.loadingPage.setPercent(pct);
                            }
                        }
                    },function(err){
                        console.error( err );
                    });
            }

            //判断是单个还是多个模型网格文件
            var pct = 0;
            if(paths.m instanceof Array){
                scope.loader.mi = 0;
                scope.loader.maxmi = paths.m.length - 1;
                loadMulti();
            }else{
                scope.loader.endLoad = true;
                scope.loader.load(paths.m, function (obj) {
                    LoadComplete(obj);
                },
                function (xhr) {   
                    if(scope.loadingPage){
                        if((xhr.total === undefined || xhr.total === 0)){
                            pct += 1;
                            if(pct >= 100){
                                pct = 100;
                            }
                            scope.loadingPage.setPercent(pct);
                        }else{
                            pct = parseInt(xhr.loaded * 100 / xhr.total);
                            scope.loadingPage.setPercent(pct);
                        }   
                    }
                },
                function (err) {
                    console.error(err);
                });
            }     
        }
    }

export {BaseViewer};